{"name":"Parcelforce","tagline":"Parcelforce expressTransfer API for Laravel to generate pre-advice electronic file that required by solution.","body":"Parcelforce expressTransfer API for Laravel 4\r\n======================\r\n[**Parcelforce exrpessTransfer**](http://www.parcelforce.com/)API for [**Laravel**](http://laravel.com/) to generate pre-advice electronic file that required by solution.\r\n\r\n[![Build Status](https://travis-ci.org/alexpechkarev/parcelforce.svg?branch=master)](https://travis-ci.org/alexpechkarev/parcelforce)\r\n\r\n\r\n\r\nFeatures\r\n------------\r\n\r\n - Generating electronic file on the server\r\n - Submitting electronic file to [**Parcelforce**](http://www.parcelforce.com/)\r\n - Single or multiply consignment's per file\r\n - UK Domestic collection request (Label and receipt provided by PFW driver) \r\n - UK Domestic services dispatches only (Label printed by customer)\r\n - Can be used as Laravel package or PHP standalone class\r\n\r\n\r\n        \r\nRequirements\r\n------------\r\n\r\nMust be [**Parcelforce**](http://www.parcelforce.com/account-customer/benefits-of-parcelforce-account) customer        \r\nPHP >= 5.3        \r\nMySQL        \r\n[**Laravel**](http://laravel.com/) >= 4.1 if used as Laravel package\r\n\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n```sh\r\ncomposer require alexpechkarev/parcelforce  dev-master\r\n```\r\n\r\n\r\nConfiguration\r\n-------------\r\n\r\nOnce installed, register Laravel service provider, in `app/config/app.php`:\r\n\r\n```php\r\n'providers' => array(\r\n\t...\r\n    'Parcelforce\\ExpressTransfer\\ParcelforceServiceProvider',\r\n)\r\n```\r\n\r\nPublish configuration file:\r\n\r\n```sh\r\nphp artisan config:publish parcelforce/expresstransfer --path vendor/alexpechkarev/parcelforce/src/config/\r\n```\r\n\r\nAll generated file will be stored in `app/config/packages/parcelforce/expresstransfer/files` folder by default. \r\nEnsure this folder writable by the web server:\r\n```sh\r\nchmod o+w app/config/packages/parcelforce/expresstransfer/files\r\n```\r\n\r\nName and location of this folder can be specified in the configuration file by editing `filePath` value, \r\nif changed ensure it's writable by we server.\r\n\r\n```php\r\n    /**\r\n     * Location consignment files\r\n     */        \r\n    'filePath'                        => __DIR__.'/files/',\r\n```\r\n\r\n\r\nIn the configuration file `app/config/packages/parcelforce/expresstransfer/config.php` please ensure that following parameters are set. \r\nFor more details on configuration options and required values please contact [**Parcelforce**](http://www.parcelforce.com/contact-us).\r\nBy default these parameters preset with dummy values.\r\n```\r\n 'header_customer_account' \r\n 'header_generic_contract'\r\n 'senderName'\r\n 'senderAddress1'\r\n 'senderPostTown'\r\n 'senderPostcode'\r\n 'dr_consignment_number' \r\n 'fileName' \r\n 'ftpUser' \r\n 'ftpPass'\r\n 'ftpUploadPath'\r\n 'ftpLocationPath'\r\n```\r\n\r\n\r\nLaravel Usage\r\n-------------\r\n\r\nSimply pass you data as array to `Parcelforce::process()` method. Electronic file will be generated for given data, \r\nstored at `filePath` location and submitted to Parcelforce. \r\n\r\n```php\r\n        $senderData = array(\r\n            array(\r\n                \"deliveryDetails\"=>array(\r\n                    'receiverName'      =>\"MR CUSTOMER\",\r\n                    'receiverAddress1'  =>'100 CUSTOMER SOLUTIONS STREET',\r\n                    'receiverPostTown'  =>'MILTON KEYNES',\r\n                    'receiverPostcode'  =>'MK9 9AB'\r\n                    )\r\n            )           \r\n        );\r\n\r\n        Parcelforce::process($senderData);\r\n\r\n        // generate file locally without submitting to Parcelforce\r\n        Parcelforce::process($senderData, FALSE);\r\n```\r\n\r\n\r\n\r\nMultiply consignment data can be submitted in single request.\r\n\r\n```php\r\n        $senderData = array(\r\n            array(\r\n                \"deliveryDetails\"=>array(\r\n                    'receiverName'      =>\"MR CUSTOMER\",\r\n                    'receiverAddress1'  =>'100 CUSTOMER SOLUTIONS STREET',\r\n                    'receiverPostTown'  =>'MILTON KEYNES',\r\n                    'receiverPostcode'  =>'MK9 9AB'\r\n                    )\r\n            ),\r\n            array(\r\n                \"deliveryDetails\"=>array(\r\n                    'receiverName'      =>\"MR CUSTOMER\",\r\n                    'receiverAddress1'  =>'202 CUSTOMER SOLUTIONS STREET',\r\n                    'receiverPostTown'  =>'MILTON KEYNES',\r\n                    'receiverPostcode'  =>'MK9 9AB'\r\n                    )\r\n            )\r\n        );\r\n\r\n        Parcelforce::process($senderData);\r\n```\r\n\r\nBy default collection date is set for tomorrow's date and can be amended in the configuration file, see `collectionDate`.\r\nThis value can also be specified at runtime using `Parcelforce::setDate()` method.\r\n```php\r\n    Parcelforce::setDate(\"next Monday\");\r\n    Parcelforce::process($senderData);\r\n```\r\nDates handled by:\r\n \r\n - [**Carbon**](https://github.com/briannesbitt/Carbon) in package for Laravel\r\n - [**DateTime**](http://php.net/manual/en/book.datetime.php) in PHP standalone class  \r\n\r\nFollowing formats accepted by `setDate()` method:\r\n\r\n[**Relative Formats**](http://php.net/manual/en/datetime.formats.relative.php)\r\n\r\n - tomorrow\r\n - next wednesday\r\n - this thursday\r\n - ....\r\n\r\n\r\n[**Date Formats**](http://php.net/manual/en/datetime.formats.date.php)\r\n\r\n - 2014-08-11\r\n - 08/11/2014\r\n - 20140811\r\n - ....\r\n\r\n\r\n\r\nPHP standalone class Usage\r\n-------------\r\nLocation: 'Parcelforce\\ExpressTransfer\\PHP\\'\r\n\r\nStandalone class have same methods as Laravel package and accepts consignment data in the same way.\r\nBefore use please ensure that required parameters are set in configuration file 'Parcelforce/ExpressTransfer/PHP/config.php' and\r\n`Parcelforce/ExpressTransfer/PHP/files` folder is writable by web server.\r\n\r\n```php\r\n       $pf = new \\Parcelforce\\ExpressTransfer\\PHP\\Parcelforce();\r\n       $pf->process($senderData));\r\n       \r\n       // generate file locally without submitting to Parcelforce\r\n       $pf->process($senderData));\r\n```\r\n\r\n`setDate()` method is also available in standalone version.\r\n```php\r\n    ...\r\n    $pf->setDate(\"next Monday\");\r\n    $pf->process($senderData);\r\n```\r\n\r\n\r\nConfiguration testing\r\n-------------\r\n\r\nFor testing and configuration purposes file can be generated without being submitted to Parcelforce.\r\nTo generate file locally simply pass `FALSE` as second parameter to `process()` method.\r\n```php\r\n    // In Laravel package\r\n    Parcelforce::process($senderData, FALSE);\r\n\r\n    // In PHP standalone class\r\n    $pf->process($senderData, FALSE);\r\n```\r\n\r\nOnce testing and configuration completed file and consignment numbers have to be reset to initial values.\r\nTo initiate process call `reset()` method. \r\nPlease note: `reset()` will reload database tables and all the data will be lost.\r\nSee `config.php` for table details.\r\n```php\r\n    // In Laravel package\r\n    Parcelforce::reset();\r\n\r\n    // In PHP standalone class\r\n    $pf->reset();\r\n```\r\n\r\n\r\n\r\nPHPUnit Testing\r\n-------------\r\n\r\nPHPUnit testing require [**Mockery**](https://github.com/padraic/mockery) flexible PHP mock object framework.\r\nRun following command to install Mockery:\r\n```\r\ncomposer require mockery/mockery:dev-master@dev\r\n```\r\nIn Laravel package test file needs copying from package folder into `app/tests/` folder, use following to do so:\r\n```\r\ncp vendor/alexpechkarev/parcelforce/tests/ParcelforceLaravelTest.txt app/tests/ParcelforceTest.php\r\n```\r\nAnd then run test:\r\n```sh\r\nphpunit app/tests/ParcelforceTest.php\r\n```\r\n\r\nTo test PHP standalone file ensure database credentials are set in the config file.\r\n```sh\r\n    phpunit vendor/alexpechkarev/parcelforce/tests/ParcelforcePHPTest.php\r\n```\r\n\r\n\r\nMain Methods\r\n-------------\r\n```php\r\n     /** \r\n     * @param array $data - array of data\r\n     * @return string File content\r\n     */\r\n     public function process($data, $upload = TRUE)\r\n\r\n\r\n    /**\r\n     * Drop database tables\r\n     */\r\n    public function reset()\r\n\r\n\r\n\r\n    /**\r\n     * Get file content\r\n     * @return string\r\n     */\r\n     public function getFileContent()\r\n\r\n\r\n    /**\r\n     * Get current instance config file\r\n     * @return array\r\n     */\r\n    public function getConfig()\r\n```\r\n\r\n\r\n\r\nSupport\r\n-------------\r\n\r\n[Please open an issue on GitHub](https://github.com/alexpechkarev/parcelforce/issues)\r\n\r\n\r\nLicense\r\n-------------\r\n\r\nParcelforce expressTransfer API for Laravel 4 is released under the MIT License. See the bundled\r\n[LICENSE](https://github.com/alexpechkarev/parcelforce/blob/master/LICENSE)\r\nfile for details.","google":"UA-53835874-1","note":"Don't delete this file! It's used internally to help with page regeneration."}